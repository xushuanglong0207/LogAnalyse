{"version":3,"sources":["../../../src/server/node-environment-extensions/utils.tsx"],"sourcesContent":["import { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { abortOnSynchronousPlatformIOAccess } from '../app-render/dynamic-rendering'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\ntype ApiType = 'time' | 'random' | 'crypto'\n\nexport function io(expression: string, type: ApiType) {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.type === 'prerender') {\n      const workStore = workAsyncStorage.getStore()\n      if (workStore) {\n        let message: string\n        switch (type) {\n          case 'time':\n            message = `Route \"${workStore.route}\" used ${expression} instead of using \\`performance\\` or without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-current-time`\n            break\n          case 'random':\n            message = `Route \"${workStore.route}\" used ${expression} outside of \\`\"use cache\"\\` and without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-random`\n            break\n          case 'crypto':\n            message = `Route \"${workStore.route}\" used ${expression} outside of \\`\"use cache\"\\` and without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-crypto`\n            break\n          default:\n            throw new InvariantError(\n              'Unknown expression type in abortOnSynchronousPlatformIOAccess.'\n            )\n        }\n        const errorWithStack = new Error(message)\n\n        abortOnSynchronousPlatformIOAccess(\n          workStore.route,\n          expression,\n          errorWithStack,\n          workUnitStore\n        )\n      }\n    }\n  }\n}\n"],"names":["workAsyncStorage","workUnitAsyncStorage","abortOnSynchronousPlatformIOAccess","InvariantError","io","expression","type","workUnitStore","getStore","workStore","message","route","errorWithStack","Error"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,4CAA2C;AAC5E,SAASC,oBAAoB,QAAQ,iDAAgD;AACrF,SAASC,kCAAkC,QAAQ,kCAAiC;AACpF,SAASC,cAAc,QAAQ,mCAAkC;AAIjE,OAAO,SAASC,GAAGC,UAAkB,EAAEC,IAAa;IAClD,MAAMC,gBAAgBN,qBAAqBO,QAAQ;IACnD,IAAID,eAAe;QACjB,IAAIA,cAAcD,IAAI,KAAK,aAAa;YACtC,MAAMG,YAAYT,iBAAiBQ,QAAQ;YAC3C,IAAIC,WAAW;gBACb,IAAIC;gBACJ,OAAQJ;oBACN,KAAK;wBACHI,UAAU,CAAC,OAAO,EAAED,UAAUE,KAAK,CAAC,OAAO,EAAEN,WAAW,mLAAmL,CAAC;wBAC5O;oBACF,KAAK;wBACHK,UAAU,CAAC,OAAO,EAAED,UAAUE,KAAK,CAAC,OAAO,EAAEN,WAAW,wKAAwK,CAAC;wBACjO;oBACF,KAAK;wBACHK,UAAU,CAAC,OAAO,EAAED,UAAUE,KAAK,CAAC,OAAO,EAAEN,WAAW,wKAAwK,CAAC;wBACjO;oBACF;wBACE,MAAM,IAAIF,eACR;gBAEN;gBACA,MAAMS,iBAAiB,IAAIC,MAAMH;gBAEjCR,mCACEO,UAAUE,KAAK,EACfN,YACAO,gBACAL;YAEJ;QACF;IACF;AACF"}