[
  {
    "file_id": 1,
    "filename": "dd-testdpeednosendemail.py",
    "analysis_time": "2025-08-31T19:09:23.191880",
    "issues": [],
    "summary": {
      "total_issues": 0,
      "high_severity": 0,
      "medium_severity": 0
    },
    "owner_id": 1
  },
  {
    "file_id": 3,
    "filename": "pasted.log",
    "analysis_time": "2025-08-31T19:09:47.568393",
    "issues": [],
    "summary": {
      "total_issues": 0,
      "high_severity": 0,
      "medium_severity": 0
    },
    "owner_id": 1
  },
  {
    "file_id": 2,
    "filename": "dd-testdpeednosendemail.py",
    "analysis_time": "2025-09-03T23:19:11.778813",
    "issues": [
      {
        "rule_name": "1",
        "description": "2",
        "line_number": 1,
        "matched_text": "共 121 个匹配: ",
        "context": "匹配 1 (行 1):\n# 创建时间：2024-12-06 17：00\n# 功能：dd测试，数据块4, 8, 16, 32, 64, 128, 256, 512, 1024，测试完成生成HTML报告\n\n匹配 2 (行 2):\n# 创建时间：2024-12-06 17：00\n# 功能：dd测试，数据块4, 8, 16, 32, 64, 128, 256, 512, 1024，测试完成生成HTML报告\n# 使用方法：python3 dd_test_generate_report.py <测试选项> <测试文件大小>\n\n匹配 3 (行 55):\n    python3 dd_test_generate_report.py sda 5\n    python3 dd_test_generate_report.py md1 5 2\n    \n\n匹配 4 (行 75):\n        # 先尝试从fw_printenv获取ugmodel（针对ARM设备）\n        cmd = \"which fw_printenv >/dev/null 2>&1 && fw_printenv ugmodel 2>/dev/null | head -n 1\"\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n匹配 5 (行 146):\n            parts = output.split()\n            if len(parts) >= 2:\n                return parts[1]  # 获取总内存大小\n\n匹配 6 (行 176):\n        # 使用ls命令获取所有md设备\n        cmd = \"ls -1 /dev/md* 2>/dev/null | grep -E 'md[0-9]+$' | sed 's|/dev/||'\"\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n匹配 7 (行 225):\n                mount_info['type'] = parts[1]       # 文件系统类型\n                mount_info['size'] = parts[2]       # 总大小\n                mount_info['used'] = parts[3]       # 已用空间\n\n匹配 8 (行 333):\n            capacity_line = result.stdout.strip()\n            # 尝试提取容量数据，通常格式为：User Capacity: 2,000,398,934,016 bytes [2.00 TB]\n            capacity_match = re.search(r'\\[([\\d\\.\\s]+[KMGTP]B)\\]', capacity_line)\n\n匹配 9 (行 346):\n                    fdisk_line = result.stdout.strip()\n                    # 提取容量信息,格式通常为：Disk /dev/sda: 1.8 TiB, 2000398934016 bytes, 3907029168 sectors\n                    capacity_match = re.search(r':\\s*([\\d\\.\\s]+[KMGTP]iB)', fdisk_line)\n\n匹配 10 (行 409):\n            # 传输速度值转换\n            speed = float(match.group(2))\n            # 传输速度单位（MB或GB）\n\n匹配 11 (行 414):\n                # 转换为MB/s\n                speed = speed * 1024\n            print(f\"传输速度: {speed:.2f} MB/s\")\n\n匹配 12 (行 415):\n                speed = speed * 1024\n            print(f\"传输速度: {speed:.2f} MB/s\")\n            return speed\n\n匹配 13 (行 442):\n    # 测试不同块大小\n    bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    # xGB文件大小转化为kb\n\n匹配 14 (行 444):\n    # xGB文件大小转化为kb\n    total_size_kb = (file_size * 1024) * 1024\n    # 获取设备的型号\n\n匹配 15 (行 504):\n            tests = [\n                (\"阵列读写测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                (\"阵列读写测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 16 (行 511):\n            tests = [\n                (\"硬盘裸盘测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                (\"硬盘裸盘测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 17 (行 558):\n                        speeds.append(speed)\n                        f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                    \n\n匹配 18 (行 566):\n                    avg_speed = sum(speeds) / len(speeds)\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 19 (行 567):\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 20 (行 568):\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 21 (行 571):\n                    # 记录该类型测试的摘要\n                    test_summary.append(f\"{device} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                else:\n\n匹配 22 (行 684):\n            # 测试不同块大小 - 快速测试模式只测试两种大小\n            bs_list = [4, 1024] if fast_test else [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            # xGB文件大小转化为kb - 快速测试模式使用较小文件大小\n\n匹配 23 (行 687):\n            fast_size = 1 # 快速测试使用1G\n            total_size_kb = (fast_size if fast_test else file_size) * 1024 * 1024\n            \n\n匹配 24 (行 696):\n                if is_md_devices:\n                    tests = [(\"阵列读写测试-经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null\", range(1, 2))]\n                else:\n\n匹配 25 (行 698):\n                else:\n                    tests = [(\"硬盘裸盘测试-经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null\", range(1, 2))]\n            else:\n\n匹配 26 (行 703):\n                    tests = [\n                        (\"阵列读写测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                        (\"阵列读写测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 27 (行 710):\n                    tests = [\n                        (\"硬盘裸盘测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                        (\"硬盘裸盘测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 28 (行 774):\n                            speeds.append(speed)\n                            f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                        \n\n匹配 29 (行 783):\n                        avg_speed = sum(speeds) / len(speeds)\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 30 (行 784):\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 31 (行 785):\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                \n\n匹配 32 (行 788):\n                        # 记录该类型测试的摘要\n                        all_test_summary.append(f\"{device} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                    else:\n\n匹配 33 (行 882):\n            md_name = match.group(1)\n            status = match.group(2)\n            raid_level_raw = match.group(3) if match.group(3) else 'unknown' # 有时候吧，它就不告诉你level是啥 (比如那个linear，就挺秃然的)\n\n匹配 34 (行 886):\n            \n            # 提取成员盘名称 (如 sda2[0], sdb2[1])\n            member_pattern = re.compile(r'(\\w+)(\\[\\d+\\])?(?:\\(\\w\\))?')\n\n匹配 35 (行 935):\n            # 首先获取所有MD设备列表\n            cmd = \"ls -1 /dev/md* 2>/dev/null | grep -E 'md[0-9]+'\"\n            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n匹配 36 (行 1051):\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        h1, h2, h3 { color: #333; }\n\n匹配 37 (行 1052):\n        body { font-family: sans-serif; margin: 20px; }\n        h1, h2, h3 { color: #333; }\n        h4 { color: #2c3e50; }\n\n匹配 38 (行 1053):\n        h1, h2, h3 { color: #333; }\n        h4 { color: #2c3e50; }\n        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n\n匹配 39 (行 1054):\n        h4 { color: #2c3e50; }\n        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: center; vertical-align: middle; }\n\n匹配 40 (行 1056):\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: center; vertical-align: middle; }\n        th { background-color: #f2f2f2; color: #333; }\n        tr:nth-child(even) { background-color: #f9f9f9; }\n\n匹配 41 (行 1058):\n        tr:nth-child(even) { background-color: #f9f9f9; }\n        .info-box { background-color: #eef; padding: 15px; border-left: 5px solid #aaf; margin-bottom: 20px; }\n        .device-section { margin-bottom: 30px; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }\n\n匹配 42 (行 1060):\n        .device-section { margin-bottom: 30px; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }\n        .raid-info { background-color: #f8f9fa; padding: 10px; border-left: 4px solid #2980b9; margin-top: 10px; }\n        .fs-type { color: #2980b9; font-weight: bold; }\n\n匹配 43 (行 1061):\n        .raid-info { background-color: #f8f9fa; padding: 10px; border-left: 4px solid #2980b9; margin-top: 10px; }\n        .fs-type { color: #2980b9; font-weight: bold; }\n        pre { background-color: #f5f5f5; padding: 10px; border: 1px solid #eee; overflow-x: auto; }\n\n匹配 44 (行 1064):\n        .test-cmd { font-family: monospace; padding: 5px; background-color: #f5f5f5; overflow: hidden; }\n        .cache { color: #2c7873; }\n        .no-cache { color: #1985a1; }\n\n匹配 45 (行 1087):\n    <div class=\"info-box\">\n        <h2>系统信息</h2>\n        <p><strong>设备型号:</strong> {html.escape(system_info.get('model', 'Unknown'))}</p>\n\n匹配 46 (行 1093):\n\n    <h2>测试结果汇总</h2>\n\"\"\"\n\n匹配 47 (行 1125):\n                        <tr>\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n\n匹配 48 (行 1126):\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n                            <th class=\"speed-header\" colspan=\"4\">硬盘-读写速度</th>\n\n匹配 49 (行 1140):\n            # 按照块大小分组生成行\n            bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            for bs in bs_list:\n\n匹配 50 (行 1143):\n                # 生成读写命令\n                cached_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n\n匹配 51 (行 1144):\n                cached_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n\n匹配 52 (行 1145):\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n\n匹配 53 (行 1146):\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n                \n\n匹配 54 (行 1192):\n            for member in md_detail['members']:\n                # 提取盘符 (如 sda2 -> sda)\n                member_disk = re.match(r'([a-z]+)', member)\n\n匹配 55 (行 1220):\n                        <tr>\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n\n匹配 56 (行 1221):\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n                            <th class=\"speed-header\" colspan=\"4\">阵列-读写速度</th>\n\n匹配 57 (行 1235):\n            # 按照块大小分组生成行\n            bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            for bs in bs_list:\n\n匹配 58 (行 1238):\n                # 生成读写命令\n                cached_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n\n匹配 59 (行 1239):\n                cached_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n\n匹配 60 (行 1240):\n                cached_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n\n匹配 61 (行 1241):\n                direct_read_cmd = f\"dd if=/dev/{device} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of=/dev/{device} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n                \n\n匹配 62 (行 1332):\n                        <tr>\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n\n匹配 63 (行 1333):\n                            <th class=\"bs-column\" rowspan=\"2\">块大小</th>\n                            <th class=\"cmd-column\" rowspan=\"2\">测试指令</th>\n                            <th class=\"speed-header\" colspan=\"4\">文件系统-读写速度</th>\n\n匹配 64 (行 1347):\n            # 按照块大小分组生成行\n            bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            test_file = f\"{mount_point}/dd_test_file.dat\"\n\n匹配 65 (行 1352):\n                # 生成读写命令\n                cached_read_cmd = f\"dd if={test_file} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of={test_file} bs={bs}k count={int(5*1024*1024/bs)}\"\n\n匹配 66 (行 1353):\n                cached_read_cmd = f\"dd if={test_file} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)}\"\n                cached_write_cmd = f\"dd if=/dev/zero of={test_file} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if={test_file} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n\n匹配 67 (行 1354):\n                cached_write_cmd = f\"dd if=/dev/zero of={test_file} bs={bs}k count={int(5*1024*1024/bs)}\"\n                direct_read_cmd = f\"dd if={test_file} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of={test_file} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n\n匹配 68 (行 1355):\n                direct_read_cmd = f\"dd if={test_file} of=/dev/null bs={bs}k count={int(5*1024*1024/bs)} iflag=direct\"\n                direct_write_cmd = f\"dd if=/dev/zero of={test_file} bs={bs}k count={int(5*1024*1024/bs)} oflag=direct\"\n                \n\n匹配 69 (行 1418):\n    # 测试不同块大小\n    bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    # xGB文件大小转化为kb\n\n匹配 70 (行 1420):\n    # xGB文件大小转化为kb\n    total_size_kb = (file_size * 1024) * 1024\n    # 获取设备的型号\n\n匹配 71 (行 1464):\n        tests = [\n            (\"文件系统测试-不经过缓存顺序写\", f\"if=/dev/zero of={test_file} oflag=direct\", range(1, 2)),\n            (\"文件系统测试-不经过缓存顺序读\", f\"if={test_file} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 72 (行 1511):\n                        speeds.append(speed)\n                        f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                    \n\n匹配 73 (行 1519):\n                    avg_speed = sum(speeds) / len(speeds)\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 74 (行 1520):\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 75 (行 1521):\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 76 (行 1524):\n                    # 记录该类型测试的摘要\n                    test_summary.append(f\"{mount_point} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                else:\n\n匹配 77 (行 1619):\n            # 测试不同块大小\n            bs_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            # xGB文件大小转化为kb\n\n匹配 78 (行 1621):\n            # xGB文件大小转化为kb\n            total_size_kb = (file_size * 1024) * 1024\n            \n\n匹配 79 (行 1627):\n            tests = [\n                (\"文件系统测试-不经过缓存顺序写\", f\"if=/dev/zero of={test_file} oflag=direct\", range(1, 2)),\n                (\"文件系统测试-不经过缓存顺序读\", f\"if={test_file} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 80 (行 1674):\n                            speeds.append(speed)\n                            f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                        \n\n匹配 81 (行 1682):\n                        avg_speed = sum(speeds) / len(speeds)\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 82 (行 1683):\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 83 (行 1684):\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 84 (行 1687):\n                        # 记录该类型测试的摘要\n                        all_test_summary.append(f\"{mount_point} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                    else:\n\n匹配 85 (行 1728):\n    # 测试不同块大小 - 快速测试模式只测试两种大小\n    bs_list = [4, 1024] if fast_test else [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    # xGB文件大小转化为kb - 快速测试模式使用较小文件大小\n\n匹配 86 (行 1731):\n    fast_size = 1 # 快速测试使用1G\n    total_size_kb = (fast_size if fast_test else file_size) * 1024 * 1024\n    # 获取设备的型号\n\n匹配 87 (行 1799):\n                try:\n                    disk_info = get_disk_detail_info(member.rstrip('0123456789'))  # 去除分区号\n                    model = disk_info.get('model', '未知型号').split('\\n')[0] if isinstance(disk_info.get('model'), str) else '未知型号'\n\n匹配 88 (行 1855):\n                try:\n                    disk_info = get_disk_detail_info(member.rstrip('0123456789'))  # 去除分区号\n                    model = disk_info.get('model', '未知型号').split('\\n')[0] if isinstance(disk_info.get('model'), str) else '未知型号'\n\n匹配 89 (行 1876):\n        if fast_test:\n            tests = [(\"文件系统测试-经过缓存顺序读\", f\"if={test_file} of=/dev/null\", range(1, 2))]\n            # 先创建测试文件\n\n匹配 90 (行 1880):\n            f.write(f\"创建测试文件: {test_file}\\n\")\n            create_cmd = f\"dd if=/dev/zero of={test_file} bs=1M count={fast_size*1024}\"\n            subprocess.run(create_cmd, shell=True)\n\n匹配 91 (行 1884):\n            tests = [\n                (\"文件系统测试-不经过缓存顺序写\", f\"if=/dev/zero of={test_file} oflag=direct\", range(1, 2)),\n                (\"文件系统测试-不经过缓存顺序读\", f\"if={test_file} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 92 (行 1933):\n                        speeds.append(speed)\n                        f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                    \n\n匹配 93 (行 1942):\n                    avg_speed = sum(speeds) / len(speeds)\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 94 (行 1943):\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 95 (行 1944):\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 96 (行 1947):\n                    # 记录该类型测试的摘要\n                    test_summary.append(f\"{mount_point} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                else:\n\n匹配 97 (行 2077):\n                        try:\n                            disk_info = get_disk_detail_info(member.rstrip('0123456789'))  # 去除分区号\n                            model = disk_info.get('model', '未知型号').split('\\n')[0] if isinstance(disk_info.get('model'), str) else '未知型号'\n\n匹配 98 (行 2133):\n                        try:\n                            disk_info = get_disk_detail_info(member.rstrip('0123456789'))  # 去除分区号\n                            model = disk_info.get('model', '未知型号').split('\\n')[0] if isinstance(disk_info.get('model'), str) else '未知型号'\n\n匹配 99 (行 2154):\n            # 测试不同块大小 - 快速测试模式只测试两种大小\n            bs_list = [4, 1024] if fast_test else [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n            # xGB文件大小转化为kb - 快速测试模式使用较小文件大小\n\n匹配 100 (行 2157):\n            fast_size = 1 # 快速测试使用1G\n            total_size_kb = (fast_size if fast_test else file_size) * 1024 * 1024\n            \n\n匹配 101 (行 2164):\n            if fast_test:\n                tests = [(\"文件系统测试-经过缓存顺序读\", f\"if={test_file} of=/dev/null\", range(1, 2))]\n                # 先创建测试文件\n\n匹配 102 (行 2168):\n                f.write(f\"创建测试文件: {test_file}\\n\")\n                create_cmd = f\"dd if=/dev/zero of={test_file} bs=1M count={fast_size*1024}\"\n                subprocess.run(create_cmd, shell=True)\n\n匹配 103 (行 2172):\n                tests = [\n                    (\"文件系统测试-不经过缓存顺序写\", f\"if=/dev/zero of={test_file} oflag=direct\", range(1, 2)),\n                    (\"文件系统测试-不经过缓存顺序读\", f\"if={test_file} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 104 (行 2229):\n                            speeds.append(speed)\n                            f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                        \n\n匹配 105 (行 2238):\n                        avg_speed = sum(speeds) / len(speeds)\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 106 (行 2239):\n                        current_test_type_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 107 (行 2240):\n                        print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                        f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 108 (行 2243):\n                        # 记录该类型测试的摘要\n                        all_test_summary.append(f\"{mount_point} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                    else:\n\n匹配 109 (行 2290):\n    # 测试不同块大小 - 快速测试模式只测试两种大小\n    bs_list = [4, 1024] if fast_test else [4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    # xGB文件大小转化为kb - 快速测试模式使用较小文件大小\n\n匹配 110 (行 2293):\n    fast_size = 1 # 快速测试使用1G\n    total_size_kb = (fast_size if fast_test else file_size) * 1024 * 1024\n    # 获取设备的型号\n\n匹配 111 (行 2352):\n            if is_md_device:\n                tests = [(\"阵列读写测试-经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null\", range(1, 2))]\n            else:\n\n匹配 112 (行 2354):\n            else:\n                tests = [(\"硬盘裸盘测试-经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null\", range(1, 2))]\n        else:\n\n匹配 113 (行 2359):\n                tests = [\n                    (\"阵列读写测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                    (\"阵列读写测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 114 (行 2366):\n                tests = [\n                    (\"硬盘裸盘测试-不经过缓存顺序写\", f\"if=/dev/zero of=/dev/{device} oflag=direct\", range(1, 2)),\n                    (\"硬盘裸盘测试-不经过缓存顺序读\", f\"if=/dev/{device} of=/dev/null iflag=direct\", range(3, 4)),\n\n匹配 115 (行 2430):\n                        speeds.append(speed)\n                        f.write(f\"测试数据 {run + 1}: {speed:.2f} MB/s\\n\")\n                    \n\n匹配 116 (行 2439):\n                    avg_speed = sum(speeds) / len(speeds)\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n\n匹配 117 (行 2440):\n                    current_test_results[bs] = f\"{avg_speed:.2f}\" # 记录平均速度\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n\n匹配 118 (行 2441):\n                    print(f\"\\n平均速度: {avg_speed:.2f} MB/s\")\n                    f.write(f\"\\n平均速度: {avg_speed:.2f} MB/s\\n\")\n                    \n\n匹配 119 (行 2444):\n                    # 记录该类型测试的摘要\n                    test_summary.append(f\"{device} - {test_name}(bs={bs}k): 平均速度: {avg_speed:.2f} MB/s\")\n                else:\n\n匹配 120 (行 2470):\n    test_option = sys.argv[1]\n    # 参数2：测试文件大小,单位为G 或 \"test\" 表示快速测试模式\n    file_size_str = sys.argv[2]\n\n匹配 121 (行 2471):\n    # 参数2：测试文件大小,单位为G 或 \"test\" 表示快速测试模式\n    file_size_str = sys.argv[2]\n    # 参数3（可选）：测试轮数，默认为5",
        "match_count": 121,
        "severity": "medium"
      }
    ],
    "summary": {
      "total_issues": 1,
      "high_severity": 0,
      "medium_severity": 1
    },
    "owner_id": 1
  }
]