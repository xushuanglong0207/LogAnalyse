version: "3.9"

services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: loganalyzer
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"                 # 宿主用 5433，避免占用 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backups:/backups  # 备份目录
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d loganalyzer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"
    networks: [app]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6380:6379"                  # 改为6380端口避免冲突
    volumes:
      - redis_data:/data
    networks: [app]

  backend:
    image: python:3.11-slim
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./backend:/app:rw
      - ./database:/app/database:rw     # 持久化根目录（包括 uploads 与 *.json）
      - ./database/logs:/app/logs:rw    # 专门的日志目录
    environment:
      PYTHONUNBUFFERED: "1"
      LOG_ANALYZER_DATA: /app/database  # 明确数据根目录（app/main.py 会使用）
      MAX_CONTENT_BYTES: "10485760"     # 10MB，降低单文件限制
      ANALYSIS_WORKERS: "2"             # 降低并发线程，避免资源耗尽
      MAX_CONCURRENT_ANALYSIS: "3"      # 最大同时分析任务数
      REQUEST_TIMEOUT: "300"            # 5分钟超时
      DATABASE_URL: postgresql://admin:password123@postgres:5432/loganalyzer
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-secret-key-here-change-in-production
      DEBUG: "false"                    # 生产环境关闭调试
    command: >
      bash -lc "
        apt-get update -qq &&
        apt-get install -y -qq curl gcc g++ procps htop &&
        pip install --quiet --no-cache-dir --upgrade pip &&
        pip install --quiet --no-cache-dir
          fastapi==0.104.* uvicorn[standard]==0.24.*
          pydantic python-multipart aiofiles
          python-jose[cryptography] passlib[bcrypt]
          sqlalchemy==2.0.* psycopg2-binary==2.9.*
          redis==5.0.* celery[redis]==5.3.* &&
        mkdir -p /app/logs /app/database/uploads /app/database/backups &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 1 --timeout-keep-alive 30
      "
    ports:
      - "8001:8000"                  # 统一宿主 8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
    networks: [app]

  frontend:
    image: node:20-alpine
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./frontend:/app:rw
      - frontend_node_modules:/app/node_modules  # 缓存node_modules
    environment:
      # 浏览器要访问宿主机 8001；如果你用域名/反代，可换成 https://你的域名
      NEXT_PUBLIC_API_URL: http://localhost:8001
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
    command: >
      sh -lc "
        npm config set legacy-peer-deps true &&
        npm config set fund false &&
        npm config set audit false &&
        if [ ! -d 'node_modules' ] || [ ! -f 'node_modules/.package-lock.json' ]; then
          npm install --legacy-peer-deps --silent --no-progress;
        fi &&
        npm run dev
      "
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "30m"
        max-file: "2"
    networks: [app]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  app:
    driver: bridge